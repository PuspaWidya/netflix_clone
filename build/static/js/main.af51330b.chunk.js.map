{"version":3,"sources":["components/Nav.js","components/axios.js","components/request.js","components/Banner.js","components/Rows.js","components/Homescreen.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","alt","src","instance","axios","create","baseURL","API_KEY","request","fetchTrending","fetchNetFlixOrigin","fetchTopRated","fetchPopularity","fetchActionMovies","fetchComedyMovies","fetchHororMovies","FetchRommanceMovies","FetchDocumentaries","Banner","string","n","movie","setMovie","a","get","requests","data","results","Math","floor","random","length","fetchData","style","backgroundImage","backdrop_path","backgroundSize","backgroundPosition","name","title","overview","substring","Rows","fetchUrl","isLargeRow","movies","setMovies","console","log","fetchMovie","map","poster_path","id","Homescreen","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af51330b.chunk.js","sourcesContent":["import React, { useEffect,useState } from 'react'\nimport './Nav.css'\n\n\nfunction Nav() {\n\nconst [show, handleShow] = useState(false)\n   \n    \nconst transitionNavBar = ()=>{\n    if(window.scrollY > 100){\n            handleShow(true)\n        }else{\n            handleShow(false)\n        }\n    // console.log(window.scrollY)\n}\n\nuseEffect(() => {\n    window.addEventListener(\"scroll\",transitionNavBar);\n    //cleanup\n    return () => window.removeEventListener(\"scroll\",transitionNavBar,true)\n}, [])\n    return (\n            <div className={`nav ${show && \"nav_black\"}`}>\n                <div className=\"nav_container\">\n                    <img\n                    className=\"nav_logo\"\n                    alt=\"\"\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"></img>\n                    <img\n                    className=\"nav_avatar\"\n                    alt=\"\"\n                    src=\"https://i.pinimg.com/564x/34/62/d2/3462d27440aa255b1c314ff16f4032b4.jpg\"></img>\n                </div>\n            </div>\n    )\n}\n\nexport default Nav\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL:'https://api.themoviedb.org/3'\n})\n\nexport default  instance","const API_KEY = '7388f5b7cb247908f3c5108503957bf3'\n\nconst request = {\nfetchTrending: `trending/all/week?api_key=${API_KEY}&language=en-US`,\nfetchNetFlixOrigin: `discover/tv?api_key=${API_KEY}`,\nfetchTopRated: `movie/top_rated?api_key=${API_KEY}&language=en-US`,\nfetchPopularity:`discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc`,\nfetchActionMovies :`discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&with_genres=28`,\nfetchComedyMovies:`discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=true&with_genres=35`,\nfetchHororMovies:`discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=true&with_genres=27`,\nFetchRommanceMovies : `discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=true&with_genres= 10749`,\nFetchDocumentaries: `discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=true&with_genres=99`\n}\n\nexport default request","import React,{useEffect, useState} from 'react'\nimport './Banner.css';\nimport axios from './axios'\nimport requests from './request'\n\nfunction Banner() {\n\n    const [movie,setMovie] = useState([])\n\n    useEffect(() => {\n        //fetching data from API\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetFlixOrigin)\n            setMovie(request.data.results[\n                Math.floor(Math.random() * request.data.results.length-1)])\n            return request\n        }\n\n        fetchData()\n    }, [])\n\n\n    function truncate(string,n){\n        return string?.length > n ? string.substring(0,n-1) + '...' : string\n\n    }\n    \n    return (\n        <header\n            className=\"banner\"  \n            style={{\n            backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n            backgroundSize:'cover',\n            backgroundPosition:'center center'\n        }}>\n        \n        <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">{movie?.name || movie?.title}</h1>\n            <div className=\"banner_buttons\">\n                <button className=\"banner_button\"> Play </button>\n                <button className=\"banner_button\"> My List </button>\n            </div>\n                <h1 className=\"banner_description\">\n                    {\n                        truncate\n                        (movie?.overview,150)\n                    }\n                    </h1>\n        </div>\n         <div className=\"banner-fadeButon\"/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useEffect, useState } from 'react'\nimport './Rows.css'\nimport axios from './axios'\n\nexport default function Rows({title, fetchUrl, isLargeRow =false}) {\n\n    let [movies, setMovies] = useState([])\n    const baseUrl = `https://image.tmdb.org/t/p/original/`\n\n\n    useEffect(() => {\n        console.log(fetchUrl)\n        async function fetchMovie(){\n            const request = await axios.get(fetchUrl)\n            // console.log(request,'INI REQUEST')\n            setMovies(request.data.results)\n\n            // console.log(movies,'INI MOVIES')\n            // return request\n        }\n        fetchMovie()\n    }, [fetchUrl])\n\n\nif(movies.length < 1){\n    return(\n        <h1>LOADING</h1>\n    )\n}\n\n\n    return (\n\n        <div className='row'>\n            <h2>{title}</h2>\n\n            <div className=\"row_posters\">\n            {\n                \n                movies?.map(\n                    (movie) =>\n                    (\n                      (isLargeRow && movie.poster_path) ||\n                      (!isLargeRow && movie.backdrop_path)) && \n                        (   <img \n                            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                            key={movie.id}\n                            src={`${baseUrl}${\n                                isLargeRow? movie.poster_path : movie.backdrop_path}`}\n                            alt={movie.name}/>                        \n                    )\n                )\n            }\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './Homescreen.css'\nimport Nav from './Nav'\nimport Banner from './Banner'\nimport request from './request'\nimport Row from './Rows'\n\nexport default function Homescreen() {\n\n\n    return (\n        <div className='homeScreen'>\n            <Nav/>\n            <Banner/>\n            <Row\n                title=\"Netflix Originals\"\n                fetchUrl={request.fetchNetFlixOrigin}\n                isLargeRow={true}\n            />\n            <Row title=\"Trending Now\" fetchUrl={request.fetchTrending}/>\n            <Row title=\"Top Rated\" fetchUrl={request.fetchTopRated}/>\n            <Row title=\"Popularity\" fetchUrl={request.fetchPopularity}/>\n            <Row title=\"Movies Action\" fetchUrl={request.fetchActionMovies}/>\n            <Row title=\"Movies Comedy\" fetchUrl={request.fetchComedyMovies}/>\n            <Row title=\"Movies Horor\" fetchUrl={request.fetchHororMovies}/>\n            <Row title=\"Movies Romance\" fetchUrl={request.FetchRommanceMovies}/>\n            <Row title=\"Documentaries\" fetchUrl={request.FetchDocumentaries}/>\n        </div>\n    )\n}\n ","import React from 'react';\nimport './App.css';\nimport Homescreen from './components/Homescreen'\n\n\nfunction App() {\n  return (\n   <>\n   <div className=\"app\">\n    <Homescreen/>\n   </div>\n   </>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}